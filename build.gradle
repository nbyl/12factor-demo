buildscript {
    ext {
        springBootVersion = '1.4.1.RELEASE'
    }
    repositories {
        maven {
            url 'http://nexus.default.svc.cluster.local:8081/repository/maven-public/'
        }
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("com.bmuschko:gradle-docker-plugin:3.0.3")
        classpath("gradle.plugin.com.palantir.gradle.gitversion:gradle-git-version:0.5.2")
        classpath("org._10ne.gradle:rest-gradle-plugin:0.4.2")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: "com.palantir.git-version"
apply plugin: "org.tenne.rest"

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

jar {
    archiveName = "demo.jar"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    maven {
        url 'http://nexus.default.svc.cluster.local:8081/repository/maven-public/'
    }
    mavenCentral()
}

docker {
    url 'unix:///var/run/docker.sock'

    registryCredentials {
        url = "http://${registryLocation}"
        username = System.getenv('BINTRAY_USER')
        password = System.getenv('BINTRAY_KEY')
    }
}

version gitVersion()

dependencies {
    compile('org.springframework.boot:spring-boot-starter')
    compile('org.springframework.boot:spring-boot-starter-web')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
}

task createDockerfile(type: Dockerfile) {
    destFile = project.file('build/Dockerfile')
    from 'java:8'
    maintainer 'Nicolas Byl "nicolas.byl@codecentric.de"'
    addFile 'libs/demo.jar', 'app.jar'
    exposePort 8080
    defaultCommand "java", "-Djava.security.egd=file:/dev/./urandom", "-jar", "/app.jar"
}

task buildImage(type: DockerBuildImage) {
    dependsOn createDockerfile
    inputDir = createDockerfile.destFile.parentFile
    tag = "${registryLocation}/12factor-demo:${project.version}"
}

task publishImage(type: DockerPushImage) {
    dependsOn buildImage
    imageName = "${registryLocation}/12factor-demo:${project.version}"
}

task deploy(type: org._10ne.gradle.rest.RestTask) {
    httpMethod = 'post'
    uri = "${deisControllerUrl}/v2/apps/${appName}/builds"
    requestBody = [
            image: "${registryLocation}/12factor-demo:${project.version}".toString(),
            procfile: [
                    web: 'java -Djava.security.egd=file:/dev/./urandom -jar /app.jar'
            ]
    ]
    contentType = groovyx.net.http.ContentType.JSON
    requestHeaders = [Authorization: "Token ${System.getenv('DEIS_TOKEN')}"]
}